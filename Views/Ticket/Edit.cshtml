@model TheSupportTicketSystem.Web.Models.Ticket

<h2>Edit Ticket</h2>

<form asp-action="Edit">
    <input type="hidden" asp-for="TicketId" />
    <div class="form-group">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" id="description-editor"></textarea>

        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="form-group">
    @if (User.IsInRole("Support Team User"))
    {
        <label asp-for="Status" class="control-label"></label>
        <select asp-for="Status" class="form-control">
            <option value="">-- Select Status --</option>
            <option value="Open">Open</option>
            <option value="InProgress">In Progress</option>
            <option value="Closed">Closed</option>
        </select>
    }
        <span asp-validation-for="Status" class="text-danger"></span>
    </div>
 
  
    <button type="submit" class="btn btn-primary">Save</button>
</form>

@if (User.IsInRole("Support Team User"))
{
    <a asp-action="Index">Back to List</a>
}
else
{
    <a class="mt-3" href="@Url.Action("ClientDashboard", "Dashboard")">Back to List</a>
}


<script src="https://cdn.ckeditor.com/ckeditor5/34.1.0/classic/ckeditor.js"></script>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            this.loader = loader;
        }

        upload() {
            return this.loader.file
                .then(file => {
                    return new Promise((resolve, reject) => {
                        const data = new FormData();
                        data.append('upload', file);

                        const uploadUrl = '/Ticket/UploadImage';

                        fetch(uploadUrl, {
                            method: 'POST',
                            body: data
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.url) {
                                    resolve({
                                        default: result.url
                                    });
                                } else {
                                    reject('Upload failed');
                                }
                            })
                            .catch(error => {
                                reject('Upload failed: ' + error.message);
                            });
                    });
                });
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#description-editor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
           
        })
        .catch(error => {
            console.error(error);
        });

</script>